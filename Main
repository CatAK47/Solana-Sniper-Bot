use solana_client::{
    nonblocking::{
        pubsub_client::PubsubClient,
        rpc_client::RpcClient,
    },
    rpc_config::{RpcAccountInfoConfig, RpcProgramAccountsConfig, UiAccountEncoding},
    rpc_filter::RpcFilterType,
};
use solana_sdk::{
    commitment_config::{CommitmentConfig, CommitmentLevel},
    compute_budget::ComputeBudgetInstruction,
    pubkey::Pubkey,
    signature::{Keypair, Signer},
    system_instruction,
    transaction::{Transaction, VersionedTransaction},
};
use solana_transaction_status::UiTransactionEncoding;
use spl_token::state::Mint;
use std::{env, str::FromStr, sync::Arc, time::Duration};
use dashmap::DashMap;
use futures::StreamExt;
use reqwest::Client;
use serde_json::json;
use thiserror::Error;
use tracing::{error, info, warn, Level};

const SOLANA_RPC: &str = "https://api.mainnet-beta.solana.com";
const BACKUP_RPC: &str = "https://solana-mainnet.rpc.extrnode.com";
const SOLANA_WS: &str = "wss://api.mainnet-beta.solana.com";
const DEXSCREENER_API: &str = "https://api.dexscreener.com/latest/dex/tokens/";
const RUGCHECK_API: &str = "https://api.rugcheck.xyz/v1/tokens";

#[derive(Error, Debug)]
pub enum BotError {
    #[error("RPC error: {0}")]
    RpcError(#[from] solana_client::client_error::ClientError),
    #[error("Request error: {0}")]
    RequestError(#[from] reqwest::Error),
    #[error("Invalid keypair")]
    KeypairError,
    #[error("Transaction failed")]
    TransactionError,
}

#[tokio::main]
async fn main() -> Result<(), BotError> {
    tracing_subscriber::fmt()
        .with_max_level(Level::INFO)
        .init();

    dotenv::dotenv().ok();
    let private_key = env::var("PRIVATE_KEY").expect("PRIVATE_KEY must be set");
    let keypair = parse_keypair(&private_key)?;

    let rpc_client = Arc::new(RpcClient::new_with_commitment(
        SOLANA_RPC.to_string(),
        CommitmentConfig::confirmed(),
    ));

    let pubsub_client = PubsubClient::new(SOLANA_WS).await?;

    let token_cache: Arc<DashMap<String, bool>> = Arc::new(DashMap::new());

    let (tx, mut rx) = tokio::sync::mpsc::channel(100);

    let pubsub_task = tokio::spawn({
        let token_cache = token_cache.clone();
        let rpc_client = rpc_client.clone();
        async move {
            listen_to_new_accounts(rpc_client, pubsub_client, tx, token_cache)
                .await
                .expect("Pubsub listener failed");
        }
    });

    let buyer_task = tokio::spawn(async move {
        while let Some(token_address) = rx.recv().await {
            let rpc_client = rpc_client.clone();
            let keypair = keypair.clone();
            
            tokio::spawn(async move {
                if let Err(e) = process_token(&rpc_client, &keypair, &token_address).await {
                    error!("Error processing token {}: {}", token_address, e);
                }
            });
        }
    });

    tokio::try_join!(pubsub_task, buyer_task)?;
    Ok(())
}

async fn process_token(
    rpc_client: &Arc<RpcClient>,
    keypair: &Keypair,
    token_address: &str,
) -> Result<(), BotError> {
    let token_pubkey = Pubkey::from_str(token_address)?;
    
    if !is_valid_token(rpc_client, &token_pubkey).await? {
        return Ok(());
    }

    let token_info = check_token(token_address).await?;
    if token_info.is_honeypot || token_info.liquidity < 2.0 {
        warn!("Skipping risky token: {}", token_address);
        return Ok(());
    }

    let amount = calculate_buy_amount(&token_info).await?;
    buy_token(rpc_client, keypair, &token_pubkey, amount).await?;
    
    Ok(())
}

async fn listen_to_new_accounts(
    rpc_client: Arc<RpcClient>,
    pubsub_client: PubsubClient,
    tx: tokio::sync::mpsc::Sender<String>,
    token_cache: Arc<DashMap<String, bool>>,
) -> Result<(), BotError> {
    let program_id = Pubkey::from_str("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")?;
    
    let filters = vec![
        RpcFilterType::DataSize(165),
        RpcFilterType::Memcmp(solana_client::rpc_filter::Memcmp {
            offset: 0,
            bytes: bs58::encode(b"Mint").into_string(),
            encoding: None,
        }),
    ];

    let config = RpcProgramAccountsConfig {
        filters: Some(filters),
        account_config: RpcAccountInfoConfig {
            encoding: Some(UiAccountEncoding::Base64),
            commitment: Some(CommitmentConfig::confirmed()),
            ..Default::default()
        },
        ..Default::default()
    };

    let (mut stream, _) = pubsub_client
        .program_subscribe(&program_id, Some(config))
        .await?;

    while let Some(response) = stream.next().await {
        let token_address = response.value.pubkey;
        if token_cache.contains_key(&token_address) {
            continue;
        }

        token_cache.insert(token_address.clone(), true);
        tx.send(token_address).await.map_err(|e| {
            error!("Channel send error: {}", e);
            BotError::TransactionError
        })?;
    }

    Ok(())
}

async fn buy_token(
    rpc_client: &Arc<RpcClient>,
    keypair: &Keypair,
    token_mint: &Pubkey,
    amount: u64,
) -> Result<(), BotError> {
    let recent_blockhash = rpc_client
        .get_latest_blockhash()
        .await?;

    let priority_fee = ComputeBudgetInstruction::set_compute_unit_price(100_000);
    let compute_limit = ComputeBudgetInstruction::set_compute_unit_limit(100_000);

    let instruction = system_instruction::transfer(
        &keypair.pubkey(),
        token_mint,
        amount,
    );

    let mut transaction = Transaction::new_with_payer(
        &[priority_fee, compute_limit, instruction],
        Some(&keypair.pubkey()),
    );

    transaction.sign(&[keypair], recent_blockhash);

    let serialized = bincode::serialize(&transaction)?;
    let tx_hash = rpc_client
        .send_transaction(&serialized)
        .await?;

    info!("Transaction submitted: {}", tx_hash);
    Ok(())
}

async fn is_valid_token(rpc_client: &Arc<RpcClient>, token_mint: &Pubkey) -> Result<bool, BotError> {
    let account = rpc_client.get_account(token_mint).await?;
    let mint = Mint::unpack(&account.data)?;
    
    Ok(mint.supply > 0 && mint.decimals == 9 && mint.mint_authority.is_some())
}

async fn check_token(token_address: &str) -> Result<TokenInfo, BotError> {
    let client = Client::new();
    
    let dexscreener = client
        .get(&format!("{}{}", DEXSCREENER_API, token_address))
        .timeout(Duration::from_secs(3))
        .send()
        .await?
        .json::<serde_json::Value>()
        .await?;

    let rugcheck = client
        .post(RUGCHECK_API)
        .json(&json!({ "token": token_address }))
        .send()
        .await?
        .json::<serde_json::Value>()
        .await?;

    Ok(TokenInfo {
        is_honeypot: rugcheck["isHoneypot"].as_bool().unwrap_or(true),
        liquidity: dexscreener["pairs"][0]["liquidity"]["usd"].as_f64().unwrap_or(0.0),
    })
}

#[derive(Debug)]
struct TokenInfo {
    is_honeypot: bool,
    liquidity: f64,
}

fn parse_keypair(private_key: &str) -> Result<Keypair, BotError> {
    let decoded = bs58::decode(private_key).into_vec().map_err(|_| BotError::KeypairError)?;
    Keypair::from_bytes(&decoded).map_err(|_| BotError::KeypairError)
}

async fn calculate_buy_amount(token_info: &TokenInfo) -> Result<u64, BotError> {
    let base_amount = 0.01 * 1e9 as f64;
    let liquidity_multiplier = token_info.liquidity.min(10_000.0) / 10_000.0;
    Ok((base_amount * liquidity_multiplier) as u64)
}
